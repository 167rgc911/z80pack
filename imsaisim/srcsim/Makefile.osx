# Makefile pre-configured for macOS

###
### START MACHINE DEPENDANT VARIABLES
###
# (simple) machine name - will be suffixed with 'sim' and the executable saved as '../machinesim'
MACHINE = imsai
# emulate a machine's frontpanel
FP_OBJS = fpmain.o
FP_DEFS = -DFRONTPANEL
FP_LDFLAGS = -lfrontpanel -ljpeg -lGL -lGLU
CCLD = $(CXX)
# no frontpanel emulation
#FP_OBJS =
#FP_DEFS =
#FP_LDFLAGS =
#CCLD = $(CC)
# machine specific system object files
MACHINE_OBJS = config.o iosim.o memory.o simctl.o
# machine specific I/O object files
IO_OBJS = cromemco-dazzler.o cromemco-88ccc.o cromemco-d+7a.o diskmanager.o imsai-fif.o imsai-sio2.o imsai-hal.o imsai-vio.o unix_terminal.o unix_network.o netsrv.o generic-at-modem.o libtelnet.o rtc.o simbdos.o am9511.o floatcnv.o ova.o
#machine specifc libraries
MACHINE_LIBS = -lcivetweb

# Installation directories by convention
# http://www.gnu.org/prep/standards/html_node/Directory-Variables.html
CPROG = $(MACHINE)sim
PREFIX ?= /usr/local
EXEC_PREFIX = $(PREFIX)
BINDIR = $(EXEC_PREFIX)/bin
DATAROOTDIR = $(PREFIX)/share
DOCDIR = $(DATAROOTDIR)/doc/$(CPROG)
SYSCONFDIR = $(PREFIX)/etc
HTMLDIR = $(DOCDIR)
INCLUDEDIR = $(DESTDIR)$(PREFIX)/include
LIBDIR = $(DESTDIR)$(EXEC_PREFIX)/lib

ROOT_DIR = $(DATAROOTDIR)/$(CPROG)
# system wide location for machines configuration files
CONF_DIR = $(ROOT_DIR)/conf
# system wide location for disk images
DISKS_DIR = $(ROOT_DIR)/disks
# default boot ROM path
ROMS_DIR = $(ROOT_DIR)/roms
###
### END MACHINE DEPENDANT VARIABLES
###

SIM = ../$(MACHINE)sim

CORE_DIR = ../../z80core
IO_DIR = ../../iodevices
FP_DIR = ../../frontpanel
NET_DIR = ../../webfrontend
CIV_DIR = $(NET_DIR)/civetweb

###
### START O/S PLATFORM DEPENDANT VARIABLES
###
CC = gcc
CXX = g++
EXEC = $(SIM)
PLAT_INCS = -I/opt/X11/include
PLAT_LDFLAGS = -L/usr/local/lib -L/opt/X11/lib
PLAT_LIBS =
###
### END O/S DEPENDANT VARIABLES
###

INCS = -I. -I$(CORE_DIR) -I$(IO_DIR) -I$(FP_DIR) -I$(NET_DIR) -I$(CIV_DIR)/include $(PLAT_INCS)
DEFS = -DCONFDIR=\"$(CONF_DIR)\" -DDISKSDIR=\"$(DISKS_DIR)\" -DBOOTROM=\"$(ROMS_DIR)\" $(FP_DEFS)

CWARNS = -Wall -Wextra -Wwrite-strings
CXXWARNS = -Wall -Wextra

# Production
CFLAGS = -O3 $(CWARNS) $(PLAT_CFLAGS) -U_FORTIFY_SOURCE $(DEFS) $(INCS)
CXXFLAGS = -O3 $(CXXWARNS) $(PLAT_CXXFLAGS) -U_FORTIFY_SOURCE $(DEFS) $(INCS)

# Development
#CFLAGS = -O3 $(CWARNS) $(PLAT_CFLAGS) -fstack-protector-all -D_FORTIFY_SOURCE=2 $(DEFS) $(INCS)
#CXXFLAGS = -O3 $(CXXWARNS) $(PLAT_CXXFLAGS) -fstack-protector-all -D_FORTIFY_SOURCE=2 $(DEFS) $(INCS)

# Debug
#CFLAGS = -O -g $(PLAT_CFLAGS) $(DEFS) $(INCS)
#CXXFLAGS = -O -g $(PLAT_CXXFLAGS) $(DEFS) $(INCS)

LDFLAGS = -L$(FP_DIR) -L$(CIV_DIR) $(PLAT_LDFLAGS) $(MACHINE_LIBS) \
	  $(FP_LDFLAGS) -lX11 $(PLAT_LIBS)

# core system source files for the CPU simulation - only change if the core changes
CORE_OBJS = sim0.o sim1.o sim1a.o sim2.o sim3.o sim4.o sim5.o sim6.o sim7.o simdis.o simfun.o simglb.o simice.o simint.o
OBJS = $(CORE_OBJS) $(MACHINE_OBJS) $(IO_OBJS) $(FP_OBJS)

all: $(SIM)
	@echo
	@echo "Done."
	@echo

$(SIM): $(OBJS)
	$(CCLD) $(OBJS) $(LDFLAGS) -o $@

build: _rm_obj all

install:
	@echo
	@echo Waiting to be written...
	@echo

clean: _rm_obj

_rm_obj:
	rm -f *.o

allclean: clean
	rm -f $(EXEC)
	rm -f ../disks/drive*.dsk
	rm -f ../printer.txt

#test: ; @echo $(ROOT_DIR)

fpmain.o: $(CORE_DIR)/fpmain.cpp
	$(CXX) $(CXXFLAGS) -c $(CORE_DIR)/fpmain.cpp

sim0.o: $(CORE_DIR)/sim0.c sim.h $(CORE_DIR)/simglb.h config.h memory.h
	$(CC) $(CFLAGS) -c $(CORE_DIR)/sim0.c

sim1.o: $(CORE_DIR)/sim1.c sim.h $(CORE_DIR)/simglb.h config.h memory.h
	$(CC) $(CFLAGS) -c $(CORE_DIR)/sim1.c

sim1a.o: $(CORE_DIR)/sim1a.c sim.h $(CORE_DIR)/simglb.h config.h memory.h
	$(CC) $(CFLAGS) -c $(CORE_DIR)/sim1a.c

sim2.o: $(CORE_DIR)/sim2.c sim.h $(CORE_DIR)/simglb.h config.h memory.h
	$(CC) $(CFLAGS) -c $(CORE_DIR)/sim2.c

sim3.o: $(CORE_DIR)/sim3.c sim.h $(CORE_DIR)/simglb.h config.h memory.h
	$(CC) $(CFLAGS) -c $(CORE_DIR)/sim3.c

sim4.o: $(CORE_DIR)/sim4.c sim.h $(CORE_DIR)/simglb.h config.h memory.h
	$(CC) $(CFLAGS) -c $(CORE_DIR)/sim4.c

sim5.o: $(CORE_DIR)/sim5.c sim.h $(CORE_DIR)/simglb.h config.h memory.h
	$(CC) $(CFLAGS) -c $(CORE_DIR)/sim5.c

sim6.o: $(CORE_DIR)/sim6.c sim.h $(CORE_DIR)/simglb.h config.h memory.h
	$(CC) $(CFLAGS) -c $(CORE_DIR)/sim6.c

sim7.o: $(CORE_DIR)/sim7.c sim.h $(CORE_DIR)/simglb.h config.h memory.h
	$(CC) $(CFLAGS) -c $(CORE_DIR)/sim7.c

simdis.o: $(CORE_DIR)/simdis.c sim.h $(CORE_DIR)/simglb.h config.h memory.h
	$(CC) $(CFLAGS) -c $(CORE_DIR)/simdis.c

simfun.o: $(CORE_DIR)/simfun.c sim.h $(CORE_DIR)/log.h
	$(CC) $(CFLAGS) -c $(CORE_DIR)/simfun.c

simglb.o: $(CORE_DIR)/simglb.c sim.h
	$(CC) $(CFLAGS) -c $(CORE_DIR)/simglb.c

simice.o: $(CORE_DIR)/simice.c sim.h $(CORE_DIR)/simglb.h memory.h
	$(CC) $(CFLAGS) -c $(CORE_DIR)/simice.c

simint.o: $(CORE_DIR)/simint.c sim.h $(CORE_DIR)/simglb.h
	$(CC) $(CFLAGS) -c $(CORE_DIR)/simint.c

config.o: config.c sim.h $(CORE_DIR)/simglb.h $(CORE_DIR)/log.h memory.h
	$(CC) $(CFLAGS) -c config.c

iosim.o: iosim.c sim.h $(CORE_DIR)/simglb.h $(CORE_DIR)/log.h memory.h \
	 $(IO_DIR)/simbdos.h $(IO_DIR)/rtc.h
	$(CC) $(CFLAGS) -c iosim.c

memory.o: memory.c sim.h $(CORE_DIR)/simglb.h config.h memory.h $(CORE_DIR)/log.h
	$(CC) $(CFLAGS) -c memory.c

simctl.o: simctl.c sim.h $(CORE_DIR)/simglb.h config.h memory.h $(CORE_DIR)/log.h
	$(CC) $(CFLAGS) -c simctl.c

simbdos.o: $(IO_DIR)/simbdos.c sim.h $(CORE_DIR)/simglb.h memory.h
	$(CC) $(CFLAGS) -c $(IO_DIR)/simbdos.c

am9511.o: $(IO_DIR)/apu/am9511.c $(IO_DIR)/apu/am9511.h \
	  $(IO_DIR)/apu/floatcnv.h $(IO_DIR)/apu/ova.h \
	  $(IO_DIR)/apu/types.h
	$(CC) $(CFLAGS) -c $(IO_DIR)/apu/am9511.c

floatcnv.o: $(IO_DIR)/apu/floatcnv.c $(IO_DIR)/apu/floatcnv.h \
	    $(IO_DIR)/apu/types.h
	$(CC) $(CFLAGS) -c $(IO_DIR)/apu/floatcnv.c

ova.o: $(IO_DIR)/apu/ova.c $(IO_DIR)/apu/ova.h $(IO_DIR)/apu/types.h
	$(CC) $(CFLAGS) -c $(IO_DIR)/apu/ova.c

unix_terminal.o: $(IO_DIR)/unix_terminal.c
	$(CC) $(CFLAGS) -c $(IO_DIR)/unix_terminal.c

unix_network.o: $(IO_DIR)/unix_network.c $(CORE_DIR)/log.h
	$(CC) $(CFLAGS) -c $(IO_DIR)/unix_network.c

imsai-sio2.o: $(IO_DIR)/imsai-sio2.c $(CORE_DIR)/log.h
	$(CC) $(CFLAGS) -c $(IO_DIR)/imsai-sio2.c

imsai-hal.o: $(IO_DIR)/imsai-hal.c sim.h $(CORE_DIR)/simglb.h \
	     $(CORE_DIR)/log.h $(NET_DIR)/netsrv.h
	$(CC) $(CFLAGS) -c $(IO_DIR)/imsai-hal.c

imsai-fif.o: $(IO_DIR)/imsai-fif.c $(CORE_DIR)/log.h
	$(CC) $(CFLAGS) -c $(IO_DIR)/imsai-fif.c

diskmanager.o: $(IO_DIR)/diskmanager.c sim.h $(CORE_DIR)/log.h
	$(CC) $(CFLAGS) -c $(IO_DIR)/diskmanager.c

cromemco-dazzler.o: $(IO_DIR)/cromemco-dazzler.c $(CORE_DIR)/log.h
	$(CC) $(CFLAGS) -c $(IO_DIR)/cromemco-dazzler.c

cromemco-88ccc.o: $(IO_DIR)/cromemco-88ccc.c sim.h $(CORE_DIR)/simglb.h \
		  config.h memory.h $(NET_DIR)/netsrv.h
	$(CC) $(CFLAGS) -c $(IO_DIR)/cromemco-88ccc.c

cromemco-d+7a.o: $(IO_DIR)/cromemco-d+7a.c sim.h $(CORE_DIR)/simglb.h
	$(CC) $(CFLAGS) -c $(IO_DIR)/cromemco-d+7a.c

imsai-vio.o: $(IO_DIR)/imsai-vio.c $(CORE_DIR)/log.h
	$(CC) $(CFLAGS) -c $(IO_DIR)/imsai-vio.c

netsrv.o: $(NET_DIR)/netsrv.c sim.h $(CORE_DIR)/simglb.h memory.h $(NET_DIR)/netsrv.h \
	  $(CORE_DIR)/log.h
	$(CC) $(CFLAGS) -c ../../webfrontend/netsrv.c

generic-at-modem.o: $(IO_DIR)/generic-at-modem.c $(IO_DIR)/libtelnet.h \
		    $(CORE_DIR)/log.h
	$(CC) $(CFLAGS) -c $(IO_DIR)/generic-at-modem.c

libtelnet.o: $(IO_DIR)/libtelnet.c
	$(CC) $(CFLAGS) -c $(IO_DIR)/libtelnet.c

rtc.o: $(IO_DIR)/rtc.c sim.h
	$(CC) $(CFLAGS) -c $(IO_DIR)/rtc.c
